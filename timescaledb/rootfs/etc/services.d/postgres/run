#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start PostgreSQL service if enabled
# ==============================================================================
postgres_data=/data/postgres
new_install=false

# Init data directory
if ! bashio::fs.directory_exists "${postgres_data}"; then
    bashio::log.info "Creating a new PostgreSQL initial system.."
	# Create postgress directory in data directory
    new_install=true
	mkdir -p ${postgres_data}
	chown -R postgres:postgres ${postgres_data}
	chmod 700 ${postgres_data}
else
    bashio::log.info "Using existing PostgreSQL installation.."
fi

# Initialize for new installs
if bashio::var.true "${new_install}"; then
    bashio::log.info "Initializing postgres directory.."

	# Init data-directory
	su - postgres -c "initdb -D ${postgres_data}"
	# Set timescaledb as being enabled in the postgres config file.
	sed -r -i "s/[#]*\s*(shared_preload_libraries)\s*=\s*'(.*)'/\1 = 'timescaledb,\2'/;s/,'/'/" ${postgres_data}/postgresql.conf
	# Password protect IPv4 hosts by default
	echo "host    all             all             0.0.0.0/0               md5" >> ${postgres_data}/pg_hba.conf
	echo "local    all             all                                    md5" >> ${postgres_data}/pg_hba.conf
	echo "local    all             all                                   peer" >> ${postgres_data}/pg_hba.conf
	# Listen on all addresses (*)
	sed -r -i "s/[#]listen_addresses.=.'.*'/listen_addresses\ \=\ \'\*\'/g" ${postgres_data}/postgresql.conf
	# Set telemetry level
	echo "timescaledb.telemetry_level=$(bashio::config 'timescaledb.telemetry')" >> ${postgres_data}/postgresql.conf

else
	# Set telemetry level
	sed -r -i "s/timescaledb.telemetry_level.=.'.*'/timescaledb.telemetry_level=$(bashio::config 'timescaledb.telemetry')/g" ${postgres_data}/postgresql.conf
fi
bashio::log.info "done"

# Apply mem/cpu tuning settings
bashio::log.info "Tuning resources.."
chmod 707 "/usr/share/timescaledb/002_timescaledb_tune.sh"
TS_TUNE_MEMORY=$(bashio::config 'timescaledb.maxmemory') \
	TS_TUNE_NUM_CPUS=$(bashio::config 'timescaledb.maxcpus') \
	POSTGRESQL_CONF_DIR=${postgres_data} \
	/usr/share/timescaledb/002_timescaledb_tune.sh
bashio::log.info "done"


# Start Postgres
bashio::log.info "Starting PostgreSQL.."
su - postgres -c "postgres -D ${postgres_data}" &
postgres_pid=$!
bashio::log.info "done"

# Wait for postgres to become available..
while ! psql -U "postgres" postgres -c "" 2> /dev/null; do
	sleep 1
done

# Create extensions timescaledb in initial databases
if bashio::var.true "${new_install}"; then
	psql -U "postgres" postgres -c "ALTER USER postgres WITH PASSWORD 'homeassistant';"
	psql -U "postgres" postgres -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
	psql -U "postgres" template1 -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
fi

# Create all databases if not exist
for database in $(bashio::config "databases"); do
    bashio::log.info "Create database if not exist: '${database}'"
	psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${database}'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE ${database}"
done
bashio::log.info "done"

# Enable the timescale-extentions for all indicated databases
for database in $(bashio::config "timescale_enabled"); do
    bashio::log.info "Enabling Timescale Extension for database: '${database}'"
	psql -U "postgres" ${database} -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
	# Update timescale extention, as per: https://docs.timescale.com/latest/using-timescaledb/update-db
	psql -U "postgres" ${database} -X -c "ALTER EXTENSION timescaledb UPDATE;" || true
done
bashio::log.info "done"

# And let it roll
bashio::log.notice "TimescaleDb is running!"
wait "${postgres_pid}"
