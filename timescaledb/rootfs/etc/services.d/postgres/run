#!/usr/bin/with-contenv bashio
# ==============================================================================
# Start PostgreSQL service if enabled
# ==============================================================================
declare postgres_data
declare update
declare postgres_pid
declare version_file

postgres_data=/data/postgres
version_file=/data/version
update=false

# Check if we need to update
if [[ $(< ${version_file}) != $(bashio::addon.version) ]]; then
	bashio::log.notice "Addon was updated to version: $(bashio::addon.version). Performing container upgrade..."
	update=true
fi

# Start Postgres
bashio::log.info "Starting PostgreSQL.."
su - postgres -c "postgres -D ${postgres_data}" &
postgres_pid=$!
bashio::log.info "done"

# Wait for postgres to become available..
while ! psql -U "postgres" postgres -c "" 2> /dev/null; do
	sleep 1
done

# Create extensions timescaledb in initial databases
if [[ ! -f "/data/initialized" ]]; then
	bashio::log.info "Setting up postgres user.."
	psql -U "postgres" postgres -c "ALTER USER postgres WITH PASSWORD 'homeassistant';"
	bashio::log.info "Enabling Timescale Extension for default databases.."
	psql -U "postgres" postgres -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
	psql -U "postgres" template1 -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
	touch /data/initialized
fi

# Update timescale when needed
if bashio::var.true "${update}"; then
    bashio::log.info "Updating system databases.."
	psql -U "postgres" postgres -X -c "ALTER EXTENSION timescaledb UPDATE;" || true
	psql -U "postgres" template1 -X -c "ALTER EXTENSION timescaledb UPDATE;" || true
fi

# Create all databases if not exist
for database in $(bashio::config "databases"); do
    bashio::log.info "Create database if not exist: '${database}'"
	psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${database}'" | grep -q 1 || psql -U postgres -c "CREATE DATABASE ${database}"
done
bashio::log.info "done"

# Enable the timescale-extentions for all indicated databases
for database in $(bashio::config "timescale_enabled"); do
	if bashio::var.true "${update}"; then
		# Update timescale extention, as per: https://docs.timescale.com/latest/using-timescaledb/update-db
		bashio::log.info "Updating Timescale Extension for database: '${database}'"
		psql -U "postgres" ${database} -X -c "ALTER EXTENSION timescaledb UPDATE;" || true
	else
		bashio::log.info "Enabling Timescale Extension for database: '${database}'"
		psql -U "postgres" ${database} -c "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;"
	fi
done
bashio::log.info "done"

# Exit update mode
if bashio::var.true "${update}"; then
	bashio::log.info "Exiting update mode and restarting pgAgent."
	# Write new addon-version
	bashio::addon.version > ${version_file}
	# And restart S6 pgAgent service
	s6-svc -r /var/run/s6/services/pgagent
fi

# And let it roll
bashio::log.notice "TimescaleDb is running!"
wait "${postgres_pid}"
